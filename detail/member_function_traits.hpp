//
//! Copyright © 2015
//! Brandon Kohn
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
#if !defined(NVM_MAX_MEMBER_FUNCTION_TRAIT_PARAMS)
#define NVM_MAX_MEMBER_FUNCTION_TRAIT_PARAMS 10
#endif

#if !defined(NVM_DONT_USE_PREPROCESSED_FILES)
#include "preprocessed/member_function_traits.hpp"
#else

#include <boost\preprocessor\iteration\local.hpp>
#include <boost\preprocessor\iteration\iterate.hpp>
#include <boost\preprocessor\enum.hpp>
#include <boost\preprocessor\enum_params.hpp>

#if defined(__WAVE__) && defined(NVM_CREATE_PREPROCESSED_FILES)
#pragma wave option(preserve: 2, line: 0, output: "preprocessed/member_function_traits.hpp")
#endif

//
//! Copyright © 2015
//! Brandon Kohn
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//! NOTE: This file is AUTOMATICALLY GENERATED. DO NOT EDIT DIRECTLY
//! OR YOUR CHANGES WILL BE LOST THE NEXT TIME THIS FILE IS GENERATED.
//
// All rights are reserved. Reproduction in whole or part is prohibited
// without the written consent of the copyright owner.
//
/////////////////////////////////////////////////////////////////////////////
#define NVM_MEMBER_FN_ARG(z, n, data)                                  \
    typedef BOOST_PP_CAT(A,n) BOOST_PP_CAT(BOOST_PP_CAT(Arg,n), Type); \
/***/

#define NVM_ENUM_MEMBER_FN_ARGS(n)           \
    BOOST_PP_REPEAT(n, NVM_MEMBER_FN_ARG, _) \
/***/

namespace nvm {

    struct member_function_traits
    {
        template <typename Signature>
        struct result;

        #if defined(__WAVE__) && defined(NVM_CREATE_PREPROCESSED_FILES)
        #pragma wave option(preserve: 1)
        #endif
        #define BOOST_PP_LOCAL_MACRO(n)                                              \
        template                                                                     \
        <                                                                            \
            typename RT                                                              \
          , typename T                                                               \
          BOOST_PP_COMMA_IF(n) BOOST_PP_ENUM_PARAMS(n, typename A)                   \
        >                                                                            \
        struct result<member_function_traits(T*,RT(T::*)(BOOST_PP_ENUM_PARAMS(n,A))) > \
        {                                                                            \
            typedef T* ClassType;                                                    \
            typedef RT(T::*MemFnPtr)(BOOST_PP_ENUM_PARAMS(n,A));                     \
            typedef typename boost::mpl::identity                                    \
            <                                                                        \
                RT(BOOST_PP_ENUM_PARAMS(n,A))                                        \
            >::type SignatureType;                                                   \
            typedef RT ReturnType;                                                   \
            NVM_ENUM_MEMBER_FN_ARGS(n)                                            \
        };                                                                           \
        /***/

        #define BOOST_PP_LOCAL_LIMITS (0, NVM_MAX_MEMBER_FUNCTION_TRAIT_PARAMS)
        #include BOOST_PP_LOCAL_ITERATE()
    };
            
}}//namespace nvm;

#undef NVM_MEMBER_FN_ARG
#undef NVM_ENUM_MEMBER_FN_ARGS

#endif// NVM_DONT_USE_PREPROCESSED_FILES
