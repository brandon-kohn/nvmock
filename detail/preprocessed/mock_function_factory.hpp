//
//! Copyright Â© 2015
//! Brandon Kohn
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//! NOTE: This file is AUTOMATICALLY GENERATED. DO NOT EDIT DIRECTLY
//! OR YOUR CHANGES WILL BE LOST THE NEXT TIME THIS FILE IS GENERATED.
//
// All rights are reserved. Reproduction in whole or part is prohibited
// without the written consent of the copyright owner.
//
/////////////////////////////////////////////////////////////////////////////
namespace nvm {
    template <unsigned int Arity>
    struct mock_function_factory;
        template <> struct mock_function_factory<1> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis ))); return pFn; } };
        template <> struct mock_function_factory<2> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis , boost::arg<1>()))); return pFn; } };
        template <> struct mock_function_factory<3> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis , boost::arg<1>() , boost::arg<2>()))); return pFn; } };
        template <> struct mock_function_factory<4> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis , boost::arg<1>() , boost::arg<2>() , boost::arg<3>()))); return pFn; } };
        template <> struct mock_function_factory<5> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis , boost::arg<1>() , boost::arg<2>() , boost::arg<3>() , boost::arg<4>()))); return pFn; } };
        template <> struct mock_function_factory<6> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis , boost::arg<1>() , boost::arg<2>() , boost::arg<3>() , boost::arg<4>() , boost::arg<5>()))); return pFn; } };
        template <> struct mock_function_factory<7> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis , boost::arg<1>() , boost::arg<2>() , boost::arg<3>() , boost::arg<4>() , boost::arg<5>() , boost::arg<6>()))); return pFn; } };
        template <> struct mock_function_factory<8> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis , boost::arg<1>() , boost::arg<2>() , boost::arg<3>() , boost::arg<4>() , boost::arg<5>() , boost::arg<6>() , boost::arg<7>()))); return pFn; } };
        template <> struct mock_function_factory<9> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis , boost::arg<1>() , boost::arg<2>() , boost::arg<3>() , boost::arg<4>() , boost::arg<5>() , boost::arg<6>() , boost::arg<7>() , boost::arg<8>()))); return pFn; } };
        template <> struct mock_function_factory<10> { template <typename OriginalMFN, typename MockMFN, typename T> static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis) { typedef SignatureOfMemberFunction<OriginalMFN>::type sig_type; boost::shared_ptr<boost::function_base> pFn (new boost::function<sig_type>( boost::bind(mpMFN, pThis , boost::arg<1>() , boost::arg<2>() , boost::arg<3>() , boost::arg<4>() , boost::arg<5>() , boost::arg<6>() , boost::arg<7>() , boost::arg<8>() , boost::arg<9>()))); return pFn; } };
    
    template <typename Signature>
    struct mem_fn_ptr_gen;
        template <typename R > struct mem_fn_ptr_gen<R()> { template <typename T> struct create { typedef R (T::*type)(); typedef R (T::*const_type)() const; }; };
        template <typename R , typename Arg0> struct mem_fn_ptr_gen<R(Arg0)> { template <typename T> struct create { typedef R (T::*type)(Arg0); typedef R (T::*const_type)(Arg0) const; }; };
        template <typename R , typename Arg0 , typename Arg1> struct mem_fn_ptr_gen<R(Arg0 , Arg1)> { template <typename T> struct create { typedef R (T::*type)(Arg0 , Arg1); typedef R (T::*const_type)(Arg0 , Arg1) const; }; };
        template <typename R , typename Arg0 , typename Arg1 , typename Arg2> struct mem_fn_ptr_gen<R(Arg0 , Arg1 , Arg2)> { template <typename T> struct create { typedef R (T::*type)(Arg0 , Arg1 , Arg2); typedef R (T::*const_type)(Arg0 , Arg1 , Arg2) const; }; };
        template <typename R , typename Arg0 , typename Arg1 , typename Arg2 , typename Arg3> struct mem_fn_ptr_gen<R(Arg0 , Arg1 , Arg2 , Arg3)> { template <typename T> struct create { typedef R (T::*type)(Arg0 , Arg1 , Arg2 , Arg3); typedef R (T::*const_type)(Arg0 , Arg1 , Arg2 , Arg3) const; }; };
        template <typename R , typename Arg0 , typename Arg1 , typename Arg2 , typename Arg3 , typename Arg4> struct mem_fn_ptr_gen<R(Arg0 , Arg1 , Arg2 , Arg3 , Arg4)> { template <typename T> struct create { typedef R (T::*type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4); typedef R (T::*const_type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4) const; }; };
        template <typename R , typename Arg0 , typename Arg1 , typename Arg2 , typename Arg3 , typename Arg4 , typename Arg5> struct mem_fn_ptr_gen<R(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5)> { template <typename T> struct create { typedef R (T::*type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5); typedef R (T::*const_type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5) const; }; };
        template <typename R , typename Arg0 , typename Arg1 , typename Arg2 , typename Arg3 , typename Arg4 , typename Arg5 , typename Arg6> struct mem_fn_ptr_gen<R(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6)> { template <typename T> struct create { typedef R (T::*type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6); typedef R (T::*const_type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6) const; }; };
        template <typename R , typename Arg0 , typename Arg1 , typename Arg2 , typename Arg3 , typename Arg4 , typename Arg5 , typename Arg6 , typename Arg7> struct mem_fn_ptr_gen<R(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7)> { template <typename T> struct create { typedef R (T::*type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7); typedef R (T::*const_type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7) const; }; };
        template <typename R , typename Arg0 , typename Arg1 , typename Arg2 , typename Arg3 , typename Arg4 , typename Arg5 , typename Arg6 , typename Arg7 , typename Arg8> struct mem_fn_ptr_gen<R(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8)> { template <typename T> struct create { typedef R (T::*type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8); typedef R (T::*const_type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8) const; }; };
        template <typename R , typename Arg0 , typename Arg1 , typename Arg2 , typename Arg3 , typename Arg4 , typename Arg5 , typename Arg6 , typename Arg7 , typename Arg8 , typename Arg9> struct mem_fn_ptr_gen<R(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9)> { template <typename T> struct create { typedef R (T::*type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9); typedef R (T::*const_type)(Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9) const; }; };
}}
