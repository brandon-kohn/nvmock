//
//! Copyright © 2015
//! Brandon Kohn
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
#if !defined(NVM_MAX_BIND_PLACEHOLDERS)
#define NVM_MAX_BIND_PLACEHOLDERS 10
#endif

#if !defined(NVM_DONT_USE_PREPROCESSED_FILES)
#include "preprocessed/mock_function_factory.hpp"
#else

#include <boost\preprocessor\iteration\local.hpp>
#include <boost\preprocessor\iteration\iterate.hpp>
#include <boost\preprocessor\enum.hpp>
#include <boost\preprocessor\enum_params.hpp>

#if defined(__WAVE__) && defined(NVM_CREATE_PREPROCESSED_FILES)
#pragma wave option(preserve: 2, line: 0, output: "preprocessed/mock_function_factory.hpp")
#endif

//
//! Copyright © 2015
//! Brandon Kohn
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//! NOTE: This file is AUTOMATICALLY GENERATED. DO NOT EDIT DIRECTLY
//! OR YOUR CHANGES WILL BE LOST THE NEXT TIME THIS FILE IS GENERATED.
//
// All rights are reserved. Reproduction in whole or part is prohibited
// without the written consent of the copyright owner.
//
/////////////////////////////////////////////////////////////////////////////
#define NVM_BIND_ARG(z, n, data)                    \
    BOOST_PP_COMMA_IF(n) boost::arg<BOOST_PP_INC(n)>() \
/***/

#define NVM_ENUM_BIND_ARGS(n)                       \
    BOOST_PP_REPEAT(n, NVM_BIND_ARG, _)             \
/***/

#if defined(__WAVE__) && defined(NVM_CREATE_PREPROCESSED_FILES)
#pragma wave option(preserve: 1)
#endif

namespace nvm {

    template <unsigned int Arity>
    struct mock_function_factory;

#define BOOST_PP_LOCAL_MACRO(n)                                                                      \
template <>                                                                                          \
struct mock_function_factory<n>                                                                      \
{                                                                                                    \
    template <typename OriginalMFN, typename MockMFN, typename T>                                    \
    static boost::shared_ptr<boost::function_base> create(OriginalMFN opMFN, MockMFN mpMFN, T* pThis)\
    {                                                                                                \
        typedef signature_of_mem_fn<OriginalMFN>::type sig_type;                                     \
        boost::shared_ptr<boost::function_base> pFn = boost::make_shared<boost::function<sig_type> > \
        (boost::bind(mpMFN, pThis BOOST_PP_COMMA_IF(BOOST_PP_DEC(n)) NVM_ENUM_BIND_ARGS(BOOST_PP_DEC(n)))); \
        return pFn;                                                                                  \
    }                                                                                                \
};                                                                                                   \
/***/

    #define BOOST_PP_LOCAL_LIMITS (1, NVM_MAX_BIND_PLACEHOLDERS)
    #include BOOST_PP_LOCAL_ITERATE()
    
    template <typename Signature>
    struct mem_fn_ptr_gen;

#define BOOST_PP_LOCAL_MACRO(n)                                                      \
    template <typename R BOOST_PP_COMMA_IF(n) BOOST_PP_ENUM_PARAMS(n, typename Arg)> \
    struct mem_fn_ptr_gen<R(BOOST_PP_ENUM_PARAMS(n, Arg))>                           \
    {                                                                                \
        template <typename T>                                                        \
        struct apply                                                                 \
        {                                                                            \
            typedef R (T::*type)(BOOST_PP_ENUM_PARAMS(n, Arg));                      \
            typedef R (T::*const_type)(BOOST_PP_ENUM_PARAMS(n, Arg)) const;          \
        };                                                                           \
    };                                                                               \
/***/

    #define BOOST_PP_LOCAL_LIMITS (0, NVM_MAX_BIND_PLACEHOLDERS)
    #include BOOST_PP_LOCAL_ITERATE()

}//namespace nvm;

#undef NVM_BIND_ARG
#undef NVM_ENUM_BIND_ARGS

#endif// NVM_DONT_USE_PREPROCESSED_FILES
